In aula:

Generazione del codice Kitten per metodi e costruttori.

In laboratorio:

Inizio dell'implementazione del codice Kitten per test e fixture:
La traduzione di una classe in Kitten bytecode comincia col metodo
translate() di absyn/ClassDefinition.java, che a sua volta chiama il metodo
translate() del metodo main di partenza. A partire da tale metodo
(cioè translate() dentro absyn/CodeDeclaration.java), vengono
compilati ricorsivamente tutti i metodi e costruttori raggiungibili,
grazie al metodo translateReferenced(). Si agisca proprio su
quest'ultimo metodo, facendo in modo che le classi dei campi a cui
si fa accesso con GETFIELD o PUTFIELD e le classi dei metodi
dinamicamente chiamati da una CALL vengano processate in modo da:

- trovare tutti i loro TestDeclaration e tutte le loro FixtureDeclaration
- per ognuna di esse, chiamare un metodo identico a translate() di
  absyn/CodeDeclaration.java (Nota: se TestDeclaration e FixtureDeclaration
  le avete fatte estendere CodeDeclaration, il metodo translate() ce l'avete
  già scritto!)

A questo punto tutti i test e fixture dovrebbero venire compilate in Kitten
bytecode e le loro segnature aggiunte nell'insieme "done" che poi finisce
dentro al Program, risultato della compilazione.

Rimane adesso da implementare la generazione del codice per il nuovo
comando assert(exp). A tal fine, implementate il metodo di traduzione

  public Block translate(Block continuation) 

dentro il vostro absyn/Assert.java. Dovreste generare del Kitten bytecode
che (per adesso!) esegue le seguenti operazioni:

1) valuta l'espressione booleana exp
2) se è vera, va alla continuazione
3) se è falsa, crea la stringa "test fallito @file.kit:riga.colonna"
   (usate il bytecode NEWSTRING) e la stampa col metodo output()
   (usate il bytecode VIRTUALCALL). Quindi va alla continuazione.

Una delle difficoltà consiste nella costruzione della stringa di
errore da riportare all'utente. Un trucco è quello di preparare questa
stringa durante il type-checking. Il type-checker contiene infatti
un oggetto di classe ErrorMsg che ha le informazioni per costruire
la stringa riga.colonna a partire dalla posizione "pos" dell'Assert.
Date un'occhiata al suo metodo error() e immaginate come copiarlo
ai vostri scopi. Il nome del file Kitten "file.kit" si può calcolare
a partire dal tipo della variabile "this", da chiedere al type-checker,
aggiungendo il suffisso ".kit".

A questo punto provate a compilare un programma con dei test e delle
fixture (col target run-kitten-bytecode-generator). Dovreste vedere dei
file in formato dot che contengono il grafo del bytecode Kitten generato
per i vostri test e fixture. Verificate che corrispondano a quello che vi
aspettavate.

Note:

1) se le vostre TestSignature e FixtureSignature non sono sottoclassi
   di CodeSignature, sarete costretti a modificare il metodo dumpCodeDot() di
   translate/Program.java, altrimenti esso non genererà i file dot per esse;
2) i file dot vengono generati con un nome ottenuto tramite il toString()
   delle TestSignature e FixtureSignature. Scrivete un toString() che
   non generi coincidenze, per esempio distinguendo le fixture della
   stessa classe (ad esempio: C.fixture1, C.fixture2, ...).
